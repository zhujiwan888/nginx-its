
#user  nobody;
worker_processes  1;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       mime.types;
    default_type  application/octet-stream;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;
    #gzip  on;
    upstream my_mysql_backend {
        #mysql -h10.94.122.212 -upinggu -pd30417e88862
        drizzle_server 10.94.122.212:3306 dbname=its user=pinggu password=d30417e88862 protocol=mysql;
        # a connection pool that can cache up to
        # 200 mysql TCP connections
        drizzle_keepalive max=200 overflow=reject;
    }

    upstream my_redis_node {
        server 127.0.0.1:6379;
        #keepalive 1024 single;
    }
    resolver 8.8.8.8;
    lua_shared_dict statics_dict    1M; # 初始化变量
    lua_package_path "/usr/local/openresty/nginx/lua/?.lua";
    log_by_lua_file "/usr/local/openresty/nginx/lua/hook.lua";
    lua_shared_dict limit 10m;

    server {
        listen       8880;
        server_name  localhost;

        #charset koi8-r;

        #access_log  logs/host.access.log  main;

        location / {
            root   html;
            index  index.html index.htm;
        }
        
		#access_by_lua
        ##http://127.0.0.1:8880/auth?user=luoqing&a=1
        location /auth {  
			access_by_lua '  
				if ngx.var.arg_user == "luoqin" then  
					return  
				else  
					ngx.exit(ngx.HTTP_FORBIDDEN)  
						end  
						';  
			echo 'welcome $arg_user';  
		}  	
	
		#rewrite_by_lua
        #三种内部跳转(rewrite/subrequest/redirect):https://blog.csdn.net/liwf616/article/details/78256062
        #http://127.0.0.1:8880/foo
		location =/foo {  
			#rewrite_by_lua 'ngx.exec("/bar")';  
			#rewrite /foo/(.*) /bar/$1 break/last/permananet/redirect;
            content_by_lua '  
        		local res = ngx.location.capture("/bar", {  
            	args = ngx.var.args  
        		})  
        		if res.status == 200 then  
            		ngx.say(res.body)  
        		end  
    		';
            #echo 'in foo';  
		}  
        
		location =/bar {  
            echo 'in bar';  
		}  	

		#content_by_lua
        #curl "http://127.0.0.1:8880/hello?who=luoqing"
		location =/hello {  
			content_by_lua '  
				local who = ngx.var.arg_who  
				ngx.say("Hello, ", who, "!")  
				';  
		}  

        # curl "http://127.0.0.1:8880/city/changsha"
        location ~ '^/city/(.*)'{
            #iconv_filter from=GBK to=UTF-8; # 没有安装这个ngx_iconv模块
            set $name $arg_n;
            set_quote_sql_str $quoted_name $name; # 只支持utf8字符
            drizzle_query "select * from estimate_city where city_name=$quoted_name";
            #drizzle_query $arg_sql;
            drizzle_pass my_mysql_backend;
            rds_json on;
        }
        
        # # (not quite) REST interface to our memcached server
		# curl "http://127.0.0.1:8880/memc?cmd=set&key=runoob&val=123"
        # curl "http://127.0.0.1:8880/memc?cmd=get&key=runoob"
        location = /memc {
			set $memc_cmd $arg_cmd;
			set $memc_key $arg_key;
			set $memc_value $arg_val;
			set $memc_exptime $arg_exptime;
			memc_pass 127.0.0.1:11211;
		}

		location =/lua_memc {  
    		content_by_lua '  
        		local res = ngx.location.capture("/memc", {  
            	args = ngx.var.args  
        		})  
        		if res.status == 200 then  
            		ngx.say(res.body)  
        		end  
    		';  
		}  
        
        # multiple pipelined queries
        # curl "http://127.0.0.1:8880/pipeline"
        location = /pipeline {
            set $value 'first';
            redis2_query set one $value;
            redis2_query get one;
            redis2_pass my_redis_node;
        }
        
        #curl "http://127.0.0.1:8880/redis?key=luoqing"
        location = /redis {  
            #internal;   #只能内部访问  
            redis2_query get $arg_key;  
            redis2_pass '127.0.0.1:6379';  
        } 

        #curl "http://127.0.0.1:8880/lua_redis?key=luoqing"
		location =/lua_redis {
            #需要LuaRedisParser  
			content_by_lua '  
				local parser = require("redis.parser")  
				local res = ngx.location.capture("/redis", {  
						args = { key = ngx.var.arg_key }  
						})  
			    if res.status == 200 then  
				    reply = parser.parse_reply(res.body)  
					ngx.say(reply)  
				end  
					';  
		}   

		location /lua_http {
			default_type 'text/html';
			#lua_code_cache on;
			content_by_lua_file /usr/local/openresty/nginx/lua/test_http.lua;
		} 
      
        #https://blog.csdn.net/wyfhist/article/details/78333671
        location =/limit {  
			access_by_lua_file "/usr/local/openresty/nginx/lua/access_nginx_check.lua";
            echo 'limit access';  
		}

        #curl "http://justforfun.com:8887/signal/junction/overview"
        #curl "http://127.0.0.1:8880/status?domain=justforfun.com"
        #访问统计https://github.com/zheng-ji/ngx_lua_reqstatus
        location /status{
            content_by_lua_file "/usr/local/openresty/nginx/lua/status.lua";
        }
       
       #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}
}
